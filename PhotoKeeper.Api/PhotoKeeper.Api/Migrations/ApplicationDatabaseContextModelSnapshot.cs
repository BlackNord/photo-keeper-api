// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotoKeeper.Api.Persistence.Database;

#nullable disable

namespace PhotoKeeper.Api.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotoKeeper.Api.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_terms");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("ResetPasswordTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_password_time");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text")
                        .HasColumnName("reset_token");

                    b.Property<DateTime?>("ResetTokenExpiresTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_token_expires_time");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("UpdationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updation_time");

                    b.Property<DateTime?>("VerificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verification_time");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text")
                        .HasColumnName("verification_token");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("PhotoKeeper.Api.Entities.Account", b =>
                {
                    b.OwnsMany("PhotoKeeper.Api.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("AccountId")
                                .HasColumnType("integer")
                                .HasColumnName("account_id");

                            b1.Property<string>("CancelReason")
                                .HasColumnType("text")
                                .HasColumnName("cancel_reason");

                            b1.Property<DateTime?>("CancellationTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("cancellation_time");

                            b1.Property<string>("CancelledByIp")
                                .HasColumnType("text")
                                .HasColumnName("cancelled_by_ip");

                            b1.Property<string>("CreatedByIp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("created_by_ip");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("creation_time");

                            b1.Property<DateTime>("ExpirationTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("expiration_time");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text")
                                .HasColumnName("replaced_by_token");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("token");

                            b1.HasKey("Id")
                                .HasName("pk_refresh_token");

                            b1.HasIndex("AccountId")
                                .HasDatabaseName("ix_refresh_token_account_id");

                            b1.ToTable("refresh_token", (string)null);

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId")
                                .HasConstraintName("fk_refresh_token_accounts_account_id");

                            b1.Navigation("Account");
                        });

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
